<template>
  <div class="clock-control">
    <div class="clock-display">
      <div class="current-time">
        <h2>{{ currentTime }}</h2>
        <p>{{ currentDate }}</p>
      </div>

      <div class="current-status">
        <div v-if="todaysLog" class="status-card">
          <div class="status-icon">
            <span v-if="isOnBreak">‚òï</span>
            <span v-else-if="todaysLog.clockIn && !todaysLog.clockOut">‚è∞</span>
            <span v-else>üè†</span>
          </div>
          <div class="status-info">
            <h3>
              <span v-if="isOnBreak">On Break</span>
              <span v-else-if="todaysLog.clockIn && !todaysLog.clockOut">Working</span>
              <span v-else>Not Clocked In</span>
            </h3>
            <p v-if="todaysLog.clockIn">
              Clocked in at {{ todaysLog.clockIn }}
            </p>
            <p v-if="userRole" class="role-badge">{{ roleDisplay }}</p>
          </div>
        </div>

        <div v-else class="status-card">
          <div class="status-icon">üëã</div>
          <div class="status-info">
            <h3>Welcome Back!</h3>
            <p>Click "Clock In" to start your work session</p>
            <p v-if="userRole" class="role-badge">{{ roleDisplay }}</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Clock Controls -->
    <div class="clock-controls">
      <div class="control-group">
        <div v-if="isDataLoading" class="loading-indicator">
          <div class="loading-spinner"></div>
          <span>Loading data...</span>
        </div>
        <div v-else-if="!hasActiveSession" class="control-buttons">
          <button
            class="clock-btn clock-in"
            @click="handleClockIn"
            :disabled="isLoading || isDataLoading || todaysLog?.status === 'active'"
          >
            <span class="btn-icon">‚ñ∂Ô∏è</span>
            <span v-if="isLoading || isDataLoading">Loading...</span>
            <span v-else>Clock In</span>
          </button>
        </div>
        <div v-else-if="hasActiveSession && !isOnBreak" class="control-buttons">
          <button class="clock-btn break-start" @click="handleBreakStart" :disabled="isLoading || isDataLoading">
            <span class="btn-icon">‚òï</span>
            Start Break
          </button>
          <button
            class="clock-btn clock-out"
            @click="handleClockOut"
            :disabled="isLoading || isDataLoading"
          >
            <span class="btn-icon">‚èπÔ∏è</span>
            <span v-if="isLoading || isDataLoading">Loading...</span>
            <span v-else>Clock Out</span>
          </button>
        </div>
        <div v-else-if="hasActiveSession && isOnBreak" class="control-buttons">
          <button class="clock-btn break-end" @click="handleBreakEnd" :disabled="isLoading || isDataLoading">
            <span class="btn-icon">‚ñ∂Ô∏è</span>
            End Break
          </button>
        </div>
      </div>
    </div>

    <!-- Today's Summary -->
    <div class="today-summary">
      <div class="summary-header">
        <h3>Today's Summary</h3>
        <div class="summary-date">{{ new Date().toLocaleDateString('en-US', { weekday: 'long', month: 'short', day: 'numeric' }) }}</div>
      </div>

      <div class="summary-content">
        <div class="summary-main">
          <div class="summary-row">
            <div class="summary-item primary">
              <div class="item-icon">üïê</div>
              <div class="item-content">
                <div class="item-label">Clock In</div>
                <div class="item-value">{{ todaysLog?.clockIn || '--:--' }}</div>
              </div>
            </div>
            <div class="summary-item primary">
              <div class="item-icon">üïï</div>
              <div class="item-content">
                <div class="item-label">Clock Out</div>
                <div class="item-value">{{ todaysLog?.clockOut || '--:--' }}</div>
              </div>
            </div>
          </div>

          <div class="summary-row">
            <div class="summary-item secondary">
              <div class="item-icon">‚è±Ô∏è</div>
              <div class="item-content">
                <div class="item-label">Total Hours</div>
                <div class="item-value">{{ todaysLog?.totalHours ? todaysLog.totalHours + 'h' : '0h' }}</div>
              </div>
            </div>
            <div class="summary-item secondary">
              <div class="item-icon">‚òï</div>
              <div class="item-content">
                <div class="item-label">Break Time</div>
                <div class="item-value">{{ breakDuration }}m</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Work Week Summary -->
    <div class="week-summary">
      <h3>This Week</h3>
      <div class="week-stats">
        <div class="week-stat">
          <span class="stat-value">{{ weeklyHours }}</span>
          <span class="stat-label">Total Hours</span>
        </div>
        <div class="week-stat">
          <span class="stat-value">{{ workDays }}</span>
          <span class="stat-label">Work Days</span>
        </div>
        <div class="week-stat">
          <span class="stat-value">{{ averageHours }}</span>
          <span class="stat-label">Daily Average</span>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, onMounted, onUnmounted } from 'vue';
import {
  todaysLog,
  weeklyHours,
  clockIn,
  clockOut,
  startBreak,
  endBreak,
  isLoading
} from '@/composables/useTimeStore.js';

// Props to specify user role - WORKS FOR ALL ROLES
const props = defineProps({
  userRole: {
    type: String,
    default: 'employee',
    validator: (value) => ['employee', 'manager', 'gm'].includes(value)
  }
});

const currentTime = ref('');
const currentDate = ref('');
const isDataLoading = ref(true);
let timeInterval = null;

// Role display
const roleDisplay = computed(() => {
  const roleMap = {
    'employee': 'Employee',
    'manager': 'Manager',
    'gm': 'General Manager'
  };
  return roleMap[props.userRole] || 'User';
});

// Update current time every second
const updateTime = () => {
  const now = new Date();
  currentTime.value = now.toLocaleTimeString('en-US', {
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  });
  currentDate.value = now.toLocaleDateString('en-US', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

// Computed properties
const hasActiveSession = computed(() => {
  return todaysLog.value?.status === 'active';
});

const isOnBreak = computed(() => {
  const log = todaysLog.value;
  if (!log) return false;
  return log.breakStart && !log.breakEnd;
});

const breakDuration = computed(() => {
  const log = todaysLog.value;
  if (!log?.breakStart) return 0;

  try {
    const breakStart = new Date(`2000-01-01T${log.breakStart}:00`);
    
    if (log.breakEnd) {
      const breakEnd = new Date(`2000-01-01T${log.breakEnd}:00`);
      const diffMs = breakEnd - breakStart;
      return Math.floor(diffMs / (1000 * 60));
    } else {
      const now = new Date();
      const diffMs = now - breakStart;
      return Math.floor(diffMs / (1000 * 60));
    }
  } catch (e) {
    return 0;
  }
});

const workDays = computed(() => {
  const weekStart = new Date();
  weekStart.setDate(weekStart.getDate() - weekStart.getDay());
  let count = 0;
  for (let i = 0; i < 7; i++) {
    const checkDate = new Date(weekStart);
    checkDate.setDate(checkDate.getDate() + i);
    if (checkDate <= new Date()) {
      count++;
    }
  }
  return Math.min(count, 5);
});

const averageHours = computed(() => {
  const total = parseFloat(weeklyHours.value || 0);
  const days = parseInt(workDays.value);
  if (days === 0) return '0.0';
  return (total / days).toFixed(1);
});

// Action handlers - SAME FOR ALL ROLES
const handleClockIn = async () => {
  if (isDataLoading.value || isLoading.value) return;

  const existingLog = todaysLog.value;
  if (existingLog && existingLog.status === 'active') {
    return;
  }

  try {
    await clockIn(true);
  } catch (err) {
    console.error('Failed to clock in:', err);
    alert('Failed to clock in. Please try again.');
  }
};

const handleClockOut = async () => {
  if (isDataLoading.value || isLoading.value) return;

  try {
    await clockOut();
  } catch (err) {
    console.error('Failed to clock out:', err);
    alert('Failed to clock out. Please try again.');
  }
};

const handleBreakStart = async () => {
  if (isDataLoading.value || isLoading.value) return;

  try {
    await startBreak();
  } catch (err) {
    console.error('Failed to start break:', err);
    alert('Failed to start break. Please try again.');
  }
};

const handleBreakEnd = async () => {
  if (isDataLoading.value || isLoading.value) return;

  try {
    await endBreak();
  } catch (err) {
    console.error('Failed to end break:', err);
    alert('Failed to end break. Please try again.');
  }
};

onMounted(() => {
  updateTime();
  timeInterval = setInterval(updateTime, 1000);
  
  setTimeout(() => {
    isDataLoading.value = false;
  }, 2000);
});

onUnmounted(() => {
  if (timeInterval) clearInterval(timeInterval);
});
</script>

<style scoped>
.clock-control {
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem;
}

.clock-display {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 2rem;
  margin-bottom: 3rem;
}

.current-time {
  text-align: center;
  padding: 2rem;
  background: linear-gradient(135deg, #667eea, #764ba2);
  border-radius: 16px;
  color: white;
}

.current-time h2 {
  font-size: 3rem;
  font-weight: 700;
  margin: 0 0 0.5rem 0;
}

.current-time p {
  font-size: 1.2rem;
  opacity: 0.9;
  margin: 0;
}

.current-status {
  display: flex;
  align-items: center;
  justify-content: center;
}

.status-card {
  background: white;
  padding: 2rem;
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  text-align: center;
  min-width: 250px;
}

.status-icon {
  font-size: 3rem;
  margin-bottom: 1rem;
}

.status-info h3 {
  font-size: 1.5rem;
  font-weight: 600;
  color: #1e293b;
  margin: 0 0 0.5rem 0;
}

.status-info p {
  color: #64748b;
  margin: 0;
}

.role-badge {
  display: inline-block;
  margin-top: 0.5rem;
  padding: 0.25rem 0.75rem;
  background: linear-gradient(135deg, #667eea, #764ba2);
  color: white;
  border-radius: 999px;
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.clock-controls {
  margin-bottom: 3rem;
}

.loading-indicator {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  padding: 1rem;
  color: #64748b;
  font-size: 0.9rem;
}

.loading-spinner {
  width: 16px;
  height: 16px;
  border: 2px solid #e5e7eb;
  border-top: 2px solid #3b82f6;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.control-group {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;
}

.control-buttons {
  display: flex;
  gap: 1rem;
}

.clock-btn {
  padding: 1rem 2rem;
  border: none;
  border-radius: 12px;
  font-size: 1.1rem;
  font-weight: 600;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  transition: all 0.2s ease;
  min-width: 150px;
  justify-content: center;
}

.clock-btn:hover:not(:disabled) {
  transform: translateY(-2px);
}

.clock-btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  transform: none !important;
  box-shadow: none !important;
}

.clock-in {
  background: linear-gradient(135deg, #10b981, #059669);
  color: white;
}

.clock-out {
  background: linear-gradient(135deg, #ef4444, #dc2626);
  color: white;
}

.break-start {
  background: linear-gradient(135deg, #f59e0b, #d97706);
  color: white;
}

.break-end {
  background: linear-gradient(135deg, #3b82f6, #2563eb);
  color: white;
}

.today-summary {
  background: white;
  padding: 2rem;
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  margin-bottom: 2rem;
}

.summary-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid #e5e7eb;
}

.summary-header h3 {
  font-size: 1.5rem;
  font-weight: 600;
  color: #1e293b;
  margin: 0;
}

.summary-date {
  font-size: 0.9rem;
  color: #64748b;
  font-weight: 500;
}

.summary-content {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.summary-main {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.summary-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
}

.summary-item {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1.25rem;
  border-radius: 12px;
  transition: all 0.2s ease;
  border: 1px solid transparent;
}

.summary-item.primary {
  background: linear-gradient(135deg, #f0f9ff, #e0f2fe);
  border-color: #0ea5e9;
}

.summary-item.secondary {
  background: linear-gradient(135deg, #f0fdf4, #dcfce7);
  border-color: #22c55e;
}

.summary-item:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.item-icon {
  font-size: 1.5rem;
  flex-shrink: 0;
}

.item-content {
  flex: 1;
  min-width: 0;
}

.item-label {
  font-size: 0.85rem;
  font-weight: 500;
  color: #64748b;
  margin-bottom: 0.25rem;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.item-value {
  font-size: 1.25rem;
  font-weight: 700;
  color: #1e293b;
  line-height: 1.2;
}

.week-summary {
  background: white;
  padding: 2rem;
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
}

.week-summary h3 {
  font-size: 1.5rem;
  font-weight: 600;
  color: #1e293b;
  margin-bottom: 1.5rem;
}

.week-stats {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1.5rem;
}

.week-stat {
  text-align: center;
  padding: 1rem;
  background: linear-gradient(135deg, #f8fafc, #e2e8f0);
  border-radius: 8px;
}

.stat-value {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  color: #1e293b;
  margin-bottom: 0.25rem;
}

.stat-label {
  color: #64748b;
  font-size: 0.9rem;
  font-weight: 500;
}

@media (max-width: 768px) {
  .clock-control {
    padding: 1rem;
  }

  .clock-display {
    grid-template-columns: 1fr;
    gap: 1.5rem;
  }

  .current-time {
    padding: 1.5rem;
  }

  .current-time h2 {
    font-size: 2rem;
  }

  .status-card {
    min-width: auto;
  }

  .control-buttons {
    flex-direction: column;
  }

  .clock-btn {
    min-width: auto;
  }

  .summary-row,
  .week-stats {
    grid-template-columns: 1fr;
  }
}
</style>clockcon<template>
  <div class="clock-control">
    <div class="clock-display">
      <div class="current-time">
        <h2>{{ currentTime }}</h2>
        <p>{{ currentDate }}</p>
      </div>

      <div class="current-status">
        <div v-if="todaysLog" class="status-card">
          <div class="status-icon">
            <span v-if="isOnBreak">‚òï</span>
            <span v-else-if="todaysLog.clockIn && !todaysLog.clockOut">‚è∞</span>
            <span v-else>üè†</span>
          </div>
          <div class="status-info">
            <h3>
              <span v-if="isOnBreak">On Break</span>
              <span v-else-if="todaysLog.clockIn && !todaysLog.clockOut">Working</span>
              <span v-else>Not Clocked In</span>
            </h3>
            <p v-if="todaysLog.clockIn">
              Clocked in at {{ todaysLog.clockIn }}
            </p>
          </div>
        </div>

        <div v-else class="status-card">
          <div class="status-icon">üëã</div>
          <div class="status-info">
            <h3>Welcome Back!</h3>
            <p>Click "Clock In" to start your work session</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Clock Controls -->
    <div class="clock-controls">
      <div class="control-group">
        <div v-if="isDataLoading" class="loading-indicator">
          <div class="loading-spinner"></div>
          <span>Loading data...</span>
        </div>
        <div v-else-if="!hasActiveSession" class="control-buttons">
          <button
            class="clock-btn clock-in"
            @click="handleClockIn"
            :disabled="isLoading || isDataLoading || todaysLog?.status === 'active'"
          >
            <span class="btn-icon">‚ñ∂Ô∏è</span>
            <span v-if="isLoading || isDataLoading">Loading...</span>
            <span v-else>Clock In</span>
          </button>
        </div>
        <div v-else-if="hasActiveSession && !isOnBreak" class="control-buttons">
          <button class="clock-btn break-start" @click="handleBreakStart" :disabled="isLoading || isDataLoading">
            <span class="btn-icon">‚òï</span>
            Start Break
          </button>
          <button
            class="clock-btn clock-out"
            @click="handleClockOut"
            :disabled="isLoading || isDataLoading"
          >
            <span class="btn-icon">‚èπÔ∏è</span>
            <span v-if="isLoading || isDataLoading">Loading...</span>
            <span v-else>Clock Out</span>
          </button>
        </div>
        <div v-else-if="hasActiveSession && isOnBreak" class="control-buttons">
          <button class="clock-btn break-end" @click="handleBreakEnd" :disabled="isLoading || isDataLoading">
            <span class="btn-icon">‚ñ∂Ô∏è</span>
            End Break
          </button>
        </div>
      </div>
    </div>

    <!-- Today's Summary -->
    <div class="today-summary">
      <div class="summary-header">
        <h3>Today's Summary</h3>
        <div class="summary-date">{{ new Date().toLocaleDateString('en-US', { weekday: 'long', month: 'short', day: 'numeric' }) }}</div>
      </div>

      <div class="summary-content">
        <div class="summary-main">
          <div class="summary-row">
            <div class="summary-item primary">
              <div class="item-icon">üïê</div>
              <div class="item-content">
                <div class="item-label">Clock In</div>
                <div class="item-value">{{ todaysLog?.clockIn || '--:--' }}</div>
              </div>
            </div>
            <div class="summary-item primary">
              <div class="item-icon">üïï</div>
              <div class="item-content">
                <div class="item-label">Clock Out</div>
                <div class="item-value">{{ todaysLog?.clockOut || '--:--' }}</div>
              </div>
            </div>
          </div>

          <div class="summary-row">
            <div class="summary-item secondary">
              <div class="item-icon">‚è±Ô∏è</div>
              <div class="item-content">
                <div class="item-label">Total Hours</div>
                <div class="item-value">{{ todaysLog?.totalHours ? todaysLog.totalHours + 'h' : '0h' }}</div>
              </div>
            </div>
            <div class="summary-item secondary">
              <div class="item-icon">‚òï</div>
              <div class="item-content">
                <div class="item-label">Break Time</div>
                <div class="item-value">{{ breakDuration }}m</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Work Week Summary -->
    <div class="week-summary">
      <h3>This Week</h3>
      <div class="week-stats">
        <div class="week-stat">
          <span class="stat-value">{{ weeklyHours }}</span>
          <span class="stat-label">Total Hours</span>
        </div>
        <div class="week-stat">
          <span class="stat-value">{{ workDays }}</span>
          <span class="stat-label">Work Days</span>
        </div>
        <div class="week-stat">
          <span class="stat-value">{{ averageHours }}</span>
          <span class="stat-label">Daily Average</span>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, onMounted, onUnmounted } from 'vue';
import {
  todaysLog,
  weeklyHours,
  clockIn,
  clockOut,
  startBreak,
  endBreak,
  isLoading
} from '@/composables/useTimeStore.js';

// Props to specify user role
const props = defineProps({
  userRole: {
    type: String,
    default: 'employee', // Default to employee for backward compatibility
    validator: (value) => ['employee', 'manager', 'gm'].includes(value)
  }
});

const currentTime = ref('');
const currentDate = ref('');
let timeInterval = null;

// Add data loading state to prevent button issues after reload
const isDataLoading = ref(true);

// Update current time every second
const updateTime = () => {
  const now = new Date();
  currentTime.value = now.toLocaleTimeString('en-US', {
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  });
  currentDate.value = now.toLocaleDateString('en-US', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

// Computed properties
const today = computed(() => new Date().toISOString().split('T')[0]);

const hasActiveSession = computed(() => {
  return todaysLog.value?.status === 'active';
});

const isOnBreak = computed(() => {
  const log = todaysLog.value;
  if (!log) return false;

  // Check if there's an active break (break started but not ended)
  return log.breakStart && !log.breakEnd;
});

const breakDuration = computed(() => {
  const log = todaysLog.value;
  if (!log?.breakStart) return 0;

  const breakStart = new Date(`2000-01-01T${log.breakStart}:00`);
  const now = new Date();

  if (log.breakEnd) {
    const breakEnd = new Date(`2000-01-01T${log.breakEnd}:00`);
    const diffMs = breakEnd - breakStart;
    return Math.floor(diffMs / (1000 * 60));
  } else {
    const diffMs = now - breakStart;
    return Math.floor(diffMs / (1000 * 60));
  }
});

const workDays = computed(() => {
  const weekStart = new Date();
  weekStart.setDate(weekStart.getDate() - weekStart.getDay());

  // Count days with logged hours
  let count = 0;
  for (let i = 0; i < 7; i++) {
    const checkDate = new Date(weekStart);
    checkDate.setDate(checkDate.getDate() + i);

    // Simple check - if we have any logs for this date, count it as a work day
    // In a real app, you'd filter by the employee's logs
    if (checkDate <= new Date()) {
      count++;
    }
  }

  return Math.min(count, 5); // Max 5 work days
});

const averageHours = computed(() => {
  const total = parseFloat(weeklyHours.value);
  const days = parseInt(workDays.value);
  if (days === 0) return '0.0';
  return (total / days).toFixed(1);
});

// Action handlers with improved error handling and state management
const handleClockIn = async () => {
  // Prevent any actions during data loading or if already loading
  if (isDataLoading.value || isLoading.value) {
    return;
  }

  // Double-check if already clocked in to prevent race conditions
  const today = new Date().toISOString().split('T')[0];
  const existingLog = todaysLog.value;
  if (existingLog && existingLog.status === 'active') {
    return;
  }

  try {
    await clockIn(true); // Pass userInitiated = true
  } catch (err) {
    console.error('Failed to clock in:', err);
    alert('Failed to clock in. Please try again.');
  }
};

const handleClockOut = async () => {
  // Prevent any actions during data loading or if already loading
  if (isDataLoading.value || isLoading.value) {
    return;
  }

  try {
    await clockOut();
  } catch (err) {
    console.error('Failed to clock out:', err);
    alert('Failed to clock out. Please try again.');
  }
};

const handleBreakStart = async () => {
  // Prevent any actions during data loading
  if (isDataLoading.value || isLoading.value) {
    return;
  }

  try {
    await startBreak();
  } catch (err) {
    console.error('Failed to start break:', err);
    alert('Failed to start break. Please try again.');
  }
};

const handleBreakEnd = async () => {
  // Prevent any actions during data loading
  if (isDataLoading.value || isLoading.value) {
    return;
  }

  try {
    await endBreak();
  } catch (err) {
    console.error('Failed to end break:', err);
    alert('Failed to end break. Please try again.');
  }
};

onMounted(() => {
  updateTime();
  timeInterval = setInterval(updateTime, 1000);

  // Allow more time for data to load before enabling buttons
  setTimeout(() => {
    isDataLoading.value = false;
  }, 3000);
});

onUnmounted(() => {
  if (timeInterval) clearInterval(timeInterval);
});
</script>

<style scoped>
.clock-control {
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem;
}

.clock-display {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 2rem;
  margin-bottom: 3rem;
}

.current-time {
  text-align: center;
  padding: 2rem;
  background: linear-gradient(135deg, #667eea, #764ba2);
  border-radius: 16px;
  color: white;
}

.current-time h2 {
  font-size: 3rem;
  font-weight: 700;
  margin: 0 0 0.5rem 0;
}

.current-time p {
  font-size: 1.2rem;
  opacity: 0.9;
  margin: 0;
}

.current-status {
  display: flex;
  align-items: center;
  justify-content: center;
}

.status-card {
  background: white;
  padding: 2rem;
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  text-align: center;
  min-width: 250px;
}

.status-icon {
  font-size: 3rem;
  margin-bottom: 1rem;
}

.status-info h3 {
  font-size: 1.5rem;
  font-weight: 600;
  color: #1e293b;
  margin: 0 0 0.5rem 0;
}

.status-info p {
  color: #64748b;
  margin: 0;
}

.clock-controls {
  margin-bottom: 3rem;
}

.loading-indicator {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  padding: 1rem;
  color: #64748b;
  font-size: 0.9rem;
}

.loading-spinner {
  width: 16px;
  height: 16px;
  border: 2px solid #e5e7eb;
  border-top: 2px solid #3b82f6;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.control-group {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;
}

.control-buttons {
  display: flex;
  gap: 1rem;
}

.clock-btn {
  padding: 1rem 2rem;
  border: none;
  border-radius: 12px;
  font-size: 1.1rem;
  font-weight: 600;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  transition: all 0.2s ease;
  min-width: 150px;
  justify-content: center;
}

.clock-btn:hover:not(:disabled) {
  transform: translateY(-2px);
}

.clock-btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  transform: none !important; /* Override hover transform */
  box-shadow: none !important; /* Override hover shadow */
}

.clock-btn:disabled:hover {
  transform: none;
  box-shadow: none;
}

.clock-in {
  background: linear-gradient(135deg, #10b981, #059669);
  color: white;
}

.clock-out {
  background: linear-gradient(135deg, #ef4444, #dc2626);
  color: white;
}

.break-start {
  background: linear-gradient(135deg, #f59e0b, #d97706);
  color: white;
}

.break-end {
  background: linear-gradient(135deg, #3b82f6, #2563eb);
  color: white;
}

.today-summary {
  background: white;
  padding: 2rem;
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  margin-bottom: 2rem;
}

.summary-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid #e5e7eb;
}

.summary-header h3 {
  font-size: 1.5rem;
  font-weight: 600;
  color: #1e293b;
  margin: 0;
}

.summary-date {
  font-size: 0.9rem;
  color: #64748b;
  font-weight: 500;
}

.summary-content {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.summary-main {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.summary-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
}

.summary-item {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1.25rem;
  border-radius: 12px;
  transition: all 0.2s ease;
  border: 1px solid transparent;
}

.summary-item.primary {
  background: linear-gradient(135deg, #f0f9ff, #e0f2fe);
  border-color: #0ea5e9;
}

.summary-item.secondary {
  background: linear-gradient(135deg, #f0fdf4, #dcfce7);
  border-color: #22c55e;
}

.summary-item:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.item-icon {
  font-size: 1.5rem;
  flex-shrink: 0;
}

.item-content {
  flex: 1;
  min-width: 0;
}

.item-label {
  font-size: 0.85rem;
  font-weight: 500;
  color: #64748b;
  margin-bottom: 0.25rem;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.item-value {
  font-size: 1.25rem;
  font-weight: 700;
  color: #1e293b;
  line-height: 1.2;
}

.week-summary {
  background: white;
  padding: 2rem;
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
}

.week-summary h3 {
  font-size: 1.5rem;
  font-weight: 600;
  color: #1e293b;
  margin-bottom: 1.5rem;
}

.week-stats {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1.5rem;
}

.week-stat {
  text-align: center;
  padding: 1rem;
  background: linear-gradient(135deg, #f8fafc, #e2e8f0);
  border-radius: 8px;
}

.stat-value {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  color: #1e293b;
  margin-bottom: 0.25rem;
}

.stat-label {
  color: #64748b;
  font-size: 0.9rem;
  font-weight: 500;
}

@media (max-width: 768px) {
  .clock-control {
    padding: 1rem;
  }

  .clock-display {
    grid-template-columns: 1fr;
    gap: 1.5rem;
  }

  .current-time {
    padding: 1.5rem;
  }

  .current-time h2 {
    font-size: 2rem;
  }

  .status-card {
    min-width: auto;
  }

  .control-buttons {
    flex-direction: column;
  }

  .clock-btn {
    min-width: auto;
  }

  .summary-row,
  .week-stats {
    grid-template-columns: 1fr;
  }
}
</style>
